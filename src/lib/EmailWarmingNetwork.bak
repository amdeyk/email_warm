// src/lib/EmailWarmingNetwork.js
const EventEmitter = require('events');
const schedule = require('node-schedule');
const { EmailAccount } = require('./EmailAccount');
const fs = require('fs').promises;
const path = require('path');
const Logger = require('./Logger');

class EmailWarmingNetwork extends EventEmitter {
    constructor(appConfig) {
        super();
        this.accounts = new Map();
        this.conversationLog = new Map();
        this.appConfig = appConfig;
        this.setupTemplates();
        this.logger = new Logger({ verbose: true });
    }

    async setupTemplates() {
        try {
            this.templates = {
                initial: await this.loadTemplates('initial'),
                reply: await this.loadTemplates('reply')
            };
        } catch (error) {
            console.error("Error loading templates:", error);
            this.templates = { initial: [], reply: [] };
        }
    }

    setupSchedules(scheduleConfig) {
        if (!scheduleConfig || !scheduleConfig.enabled || !scheduleConfig.schedules) {
            console.log("Scheduling is disabled or no schedules defined");
            return;
        }

        scheduleConfig.schedules.forEach(scheduleConfig => {
            this.createSchedule(scheduleConfig);
        });
    }

    createSchedule(scheduleConfig) {
        const { time, days } = scheduleConfig;
        console.log(`üìÖ Creating schedule for time: ${time}, days: ${days}`);

        const [hour, minute] = time.split(':').map(Number);
        let dayOfWeek = days;
        if (days.includes('-')) {
            const [start, end] = days.split('-').map(Number);
            dayOfWeek = Array.from({ length: end - start + 1 }, (_, i) => i + start);
        }

        schedule.scheduleJob({ hour, minute, dayOfWeek }, () => {
            console.log(`‚è∞ Executing scheduled task at ${new Date().toISOString()}`);
            this.initiateRandomConversations();
        });
    }

    async sendEmail(senderEmail, recipientEmail) {
        try {
            if (!senderEmail || !recipientEmail) {
                throw new Error("Sender or recipient email is missing");
            }

            const sender = this.accounts.get(senderEmail);
            if (!sender) {
                throw new Error(`Sender account ${senderEmail} not found`);
            }

            const template = this.getRandomTemplate('initial');
            if (!template) {
                throw new Error("No template available");
            }

            const { subject, content } = this.parseTemplate(template, {
                senderName: sender.displayName,
                recipientName: this.accounts.get(recipientEmail).displayName
            });

            const success = await sender.sendEmail(recipientEmail, subject, content);

            if (success) {
                this.logConversation(senderEmail, recipientEmail, subject, template.name);
                fs.appendFile("/home/ambar/git_various/email_warm/logs/email-sent.log", 
                    `${new Date().toISOString()} - Sent email from ${senderEmail} to ${recipientEmail}\n`);
                return true;
            }

            return false;
        } catch (error) {
            console.error("Error sending email:", error);
            this.emit('error', error);
            return false;
        }
    }
}

module.exports = EmailWarmingNetwork;
